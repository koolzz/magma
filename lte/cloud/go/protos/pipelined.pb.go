// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/pipelined.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/cloud/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetupFlowsResult_Result int32

const (
	SetupFlowsResult_SUCCESS        SetupFlowsResult_Result = 0
	SetupFlowsResult_FAILURE        SetupFlowsResult_Result = 1
	SetupFlowsResult_OUTDATED_EPOCH SetupFlowsResult_Result = 2
)

var SetupFlowsResult_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
	2: "OUTDATED_EPOCH",
}

var SetupFlowsResult_Result_value = map[string]int32{
	"SUCCESS":        0,
	"FAILURE":        1,
	"OUTDATED_EPOCH": 2,
}

func (x SetupFlowsResult_Result) String() string {
	return proto.EnumName(SetupFlowsResult_Result_name, int32(x))
}

func (SetupFlowsResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{1, 0}
}

type RuleModResult_Result int32

const (
	RuleModResult_SUCCESS         RuleModResult_Result = 0
	RuleModResult_PARTIAL_SUCCESS RuleModResult_Result = 1
	RuleModResult_FAILURE         RuleModResult_Result = 2
)

var RuleModResult_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "PARTIAL_SUCCESS",
	2: "FAILURE",
}

var RuleModResult_Result_value = map[string]int32{
	"SUCCESS":         0,
	"PARTIAL_SUCCESS": 1,
	"FAILURE":         2,
}

func (x RuleModResult_Result) String() string {
	return proto.EnumName(RuleModResult_Result_name, int32(x))
}

func (RuleModResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{4, 0}
}

type SetupFlowsRequest struct {
	// List of requests to activate
	Requests []*ActivateFlowsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// epoch to prevent outdated setup calls
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetupFlowsRequest) Reset()         { *m = SetupFlowsRequest{} }
func (m *SetupFlowsRequest) String() string { return proto.CompactTextString(m) }
func (*SetupFlowsRequest) ProtoMessage()    {}
func (*SetupFlowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{0}
}

func (m *SetupFlowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetupFlowsRequest.Unmarshal(m, b)
}
func (m *SetupFlowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetupFlowsRequest.Marshal(b, m, deterministic)
}
func (m *SetupFlowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupFlowsRequest.Merge(m, src)
}
func (m *SetupFlowsRequest) XXX_Size() int {
	return xxx_messageInfo_SetupFlowsRequest.Size(m)
}
func (m *SetupFlowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupFlowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupFlowsRequest proto.InternalMessageInfo

func (m *SetupFlowsRequest) GetRequests() []*ActivateFlowsRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *SetupFlowsRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type SetupFlowsResult struct {
	Result               SetupFlowsResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=magma.lte.SetupFlowsResult_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SetupFlowsResult) Reset()         { *m = SetupFlowsResult{} }
func (m *SetupFlowsResult) String() string { return proto.CompactTextString(m) }
func (*SetupFlowsResult) ProtoMessage()    {}
func (*SetupFlowsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{1}
}

func (m *SetupFlowsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetupFlowsResult.Unmarshal(m, b)
}
func (m *SetupFlowsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetupFlowsResult.Marshal(b, m, deterministic)
}
func (m *SetupFlowsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupFlowsResult.Merge(m, src)
}
func (m *SetupFlowsResult) XXX_Size() int {
	return xxx_messageInfo_SetupFlowsResult.Size(m)
}
func (m *SetupFlowsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupFlowsResult.DiscardUnknown(m)
}

var xxx_messageInfo_SetupFlowsResult proto.InternalMessageInfo

func (m *SetupFlowsResult) GetResult() SetupFlowsResult_Result {
	if m != nil {
		return m.Result
	}
	return SetupFlowsResult_SUCCESS
}

type ActivateFlowsRequest struct {
	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// Subscriber session ipv4 address
	IpAddr string `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	// List of static rules obtained from PCRF
	RuleIds []string `protobuf:"bytes,3,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
	// List of dynamic rules obtained from PCRF
	DynamicRules         []*PolicyRule `protobuf:"bytes,4,rep,name=dynamic_rules,json=dynamicRules,proto3" json:"dynamic_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ActivateFlowsRequest) Reset()         { *m = ActivateFlowsRequest{} }
func (m *ActivateFlowsRequest) String() string { return proto.CompactTextString(m) }
func (*ActivateFlowsRequest) ProtoMessage()    {}
func (*ActivateFlowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{2}
}

func (m *ActivateFlowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivateFlowsRequest.Unmarshal(m, b)
}
func (m *ActivateFlowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivateFlowsRequest.Marshal(b, m, deterministic)
}
func (m *ActivateFlowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateFlowsRequest.Merge(m, src)
}
func (m *ActivateFlowsRequest) XXX_Size() int {
	return xxx_messageInfo_ActivateFlowsRequest.Size(m)
}
func (m *ActivateFlowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateFlowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateFlowsRequest proto.InternalMessageInfo

func (m *ActivateFlowsRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *ActivateFlowsRequest) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *ActivateFlowsRequest) GetRuleIds() []string {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

func (m *ActivateFlowsRequest) GetDynamicRules() []*PolicyRule {
	if m != nil {
		return m.DynamicRules
	}
	return nil
}

// DeactivateFlowsRequest can be used to deactivate all flows for a subscriber,
// all flows for some rules, or particular rules for a subscriber, depending on
// which parameters are passed. Rule IDs can apply to static rules or dynamic
// rules
// If no rule ids are given, all flows are deactivated
type DeactivateFlowsRequest struct {
	Sid                  *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	RuleIds              []string      `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeactivateFlowsRequest) Reset()         { *m = DeactivateFlowsRequest{} }
func (m *DeactivateFlowsRequest) String() string { return proto.CompactTextString(m) }
func (*DeactivateFlowsRequest) ProtoMessage()    {}
func (*DeactivateFlowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{3}
}

func (m *DeactivateFlowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeactivateFlowsRequest.Unmarshal(m, b)
}
func (m *DeactivateFlowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeactivateFlowsRequest.Marshal(b, m, deterministic)
}
func (m *DeactivateFlowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateFlowsRequest.Merge(m, src)
}
func (m *DeactivateFlowsRequest) XXX_Size() int {
	return xxx_messageInfo_DeactivateFlowsRequest.Size(m)
}
func (m *DeactivateFlowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateFlowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateFlowsRequest proto.InternalMessageInfo

func (m *DeactivateFlowsRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *DeactivateFlowsRequest) GetRuleIds() []string {
	if m != nil {
		return m.RuleIds
	}
	return nil
}

type RuleModResult struct {
	RuleId               string               `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Result               RuleModResult_Result `protobuf:"varint,2,opt,name=result,proto3,enum=magma.lte.RuleModResult_Result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RuleModResult) Reset()         { *m = RuleModResult{} }
func (m *RuleModResult) String() string { return proto.CompactTextString(m) }
func (*RuleModResult) ProtoMessage()    {}
func (*RuleModResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{4}
}

func (m *RuleModResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleModResult.Unmarshal(m, b)
}
func (m *RuleModResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleModResult.Marshal(b, m, deterministic)
}
func (m *RuleModResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleModResult.Merge(m, src)
}
func (m *RuleModResult) XXX_Size() int {
	return xxx_messageInfo_RuleModResult.Size(m)
}
func (m *RuleModResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleModResult.DiscardUnknown(m)
}

var xxx_messageInfo_RuleModResult proto.InternalMessageInfo

func (m *RuleModResult) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RuleModResult) GetResult() RuleModResult_Result {
	if m != nil {
		return m.Result
	}
	return RuleModResult_SUCCESS
}

type ActivateFlowsResult struct {
	StaticRuleResults    []*RuleModResult `protobuf:"bytes,1,rep,name=static_rule_results,json=staticRuleResults,proto3" json:"static_rule_results,omitempty"`
	DynamicRuleResults   []*RuleModResult `protobuf:"bytes,2,rep,name=dynamic_rule_results,json=dynamicRuleResults,proto3" json:"dynamic_rule_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ActivateFlowsResult) Reset()         { *m = ActivateFlowsResult{} }
func (m *ActivateFlowsResult) String() string { return proto.CompactTextString(m) }
func (*ActivateFlowsResult) ProtoMessage()    {}
func (*ActivateFlowsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{5}
}

func (m *ActivateFlowsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivateFlowsResult.Unmarshal(m, b)
}
func (m *ActivateFlowsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivateFlowsResult.Marshal(b, m, deterministic)
}
func (m *ActivateFlowsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateFlowsResult.Merge(m, src)
}
func (m *ActivateFlowsResult) XXX_Size() int {
	return xxx_messageInfo_ActivateFlowsResult.Size(m)
}
func (m *ActivateFlowsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateFlowsResult.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateFlowsResult proto.InternalMessageInfo

func (m *ActivateFlowsResult) GetStaticRuleResults() []*RuleModResult {
	if m != nil {
		return m.StaticRuleResults
	}
	return nil
}

func (m *ActivateFlowsResult) GetDynamicRuleResults() []*RuleModResult {
	if m != nil {
		return m.DynamicRuleResults
	}
	return nil
}

type DeactivateFlowsResult struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateFlowsResult) Reset()         { *m = DeactivateFlowsResult{} }
func (m *DeactivateFlowsResult) String() string { return proto.CompactTextString(m) }
func (*DeactivateFlowsResult) ProtoMessage()    {}
func (*DeactivateFlowsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{6}
}

func (m *DeactivateFlowsResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeactivateFlowsResult.Unmarshal(m, b)
}
func (m *DeactivateFlowsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeactivateFlowsResult.Marshal(b, m, deterministic)
}
func (m *DeactivateFlowsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateFlowsResult.Merge(m, src)
}
func (m *DeactivateFlowsResult) XXX_Size() int {
	return xxx_messageInfo_DeactivateFlowsResult.Size(m)
}
func (m *DeactivateFlowsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateFlowsResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateFlowsResult proto.InternalMessageInfo

type FlowRequest struct {
	Match                *FlowMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	AppName              string     `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	BytesRx              uint64     `protobuf:"varint,3,opt,name=bytes_rx,json=bytesRx,proto3" json:"bytes_rx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FlowRequest) Reset()         { *m = FlowRequest{} }
func (m *FlowRequest) String() string { return proto.CompactTextString(m) }
func (*FlowRequest) ProtoMessage()    {}
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{7}
}

func (m *FlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowRequest.Unmarshal(m, b)
}
func (m *FlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowRequest.Marshal(b, m, deterministic)
}
func (m *FlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRequest.Merge(m, src)
}
func (m *FlowRequest) XXX_Size() int {
	return xxx_messageInfo_FlowRequest.Size(m)
}
func (m *FlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRequest proto.InternalMessageInfo

func (m *FlowRequest) GetMatch() *FlowMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *FlowRequest) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *FlowRequest) GetBytesRx() uint64 {
	if m != nil {
		return m.BytesRx
	}
	return 0
}

type FlowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowResponse) Reset()         { *m = FlowResponse{} }
func (m *FlowResponse) String() string { return proto.CompactTextString(m) }
func (*FlowResponse) ProtoMessage()    {}
func (*FlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{8}
}

func (m *FlowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowResponse.Unmarshal(m, b)
}
func (m *FlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowResponse.Marshal(b, m, deterministic)
}
func (m *FlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowResponse.Merge(m, src)
}
func (m *FlowResponse) XXX_Size() int {
	return xxx_messageInfo_FlowResponse.Size(m)
}
func (m *FlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlowResponse proto.InternalMessageInfo

// UEMacFlowRequest is used to link a subscriber ID to a MAC address.
// This is used for Carrier WiFi data session establishment
type UEMacFlowRequest struct {
	Sid *SubscriberID `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// UE MAC address
	MacAddr              string   `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UEMacFlowRequest) Reset()         { *m = UEMacFlowRequest{} }
func (m *UEMacFlowRequest) String() string { return proto.CompactTextString(m) }
func (*UEMacFlowRequest) ProtoMessage()    {}
func (*UEMacFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{9}
}

func (m *UEMacFlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UEMacFlowRequest.Unmarshal(m, b)
}
func (m *UEMacFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UEMacFlowRequest.Marshal(b, m, deterministic)
}
func (m *UEMacFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UEMacFlowRequest.Merge(m, src)
}
func (m *UEMacFlowRequest) XXX_Size() int {
	return xxx_messageInfo_UEMacFlowRequest.Size(m)
}
func (m *UEMacFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UEMacFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UEMacFlowRequest proto.InternalMessageInfo

func (m *UEMacFlowRequest) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *UEMacFlowRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

type TableAssignment struct {
	AppName              string   `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	MainTable            uint64   `protobuf:"varint,2,opt,name=main_table,json=mainTable,proto3" json:"main_table,omitempty"`
	ScratchTables        []uint64 `protobuf:"varint,3,rep,packed,name=scratch_tables,json=scratchTables,proto3" json:"scratch_tables,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableAssignment) Reset()         { *m = TableAssignment{} }
func (m *TableAssignment) String() string { return proto.CompactTextString(m) }
func (*TableAssignment) ProtoMessage()    {}
func (*TableAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{10}
}

func (m *TableAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableAssignment.Unmarshal(m, b)
}
func (m *TableAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableAssignment.Marshal(b, m, deterministic)
}
func (m *TableAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableAssignment.Merge(m, src)
}
func (m *TableAssignment) XXX_Size() int {
	return xxx_messageInfo_TableAssignment.Size(m)
}
func (m *TableAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_TableAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_TableAssignment proto.InternalMessageInfo

func (m *TableAssignment) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *TableAssignment) GetMainTable() uint64 {
	if m != nil {
		return m.MainTable
	}
	return 0
}

func (m *TableAssignment) GetScratchTables() []uint64 {
	if m != nil {
		return m.ScratchTables
	}
	return nil
}

type AllTableAssignments struct {
	TableAssignments     []*TableAssignment `protobuf:"bytes,1,rep,name=table_assignments,json=tableAssignments,proto3" json:"table_assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AllTableAssignments) Reset()         { *m = AllTableAssignments{} }
func (m *AllTableAssignments) String() string { return proto.CompactTextString(m) }
func (*AllTableAssignments) ProtoMessage()    {}
func (*AllTableAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{11}
}

func (m *AllTableAssignments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllTableAssignments.Unmarshal(m, b)
}
func (m *AllTableAssignments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllTableAssignments.Marshal(b, m, deterministic)
}
func (m *AllTableAssignments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTableAssignments.Merge(m, src)
}
func (m *AllTableAssignments) XXX_Size() int {
	return xxx_messageInfo_AllTableAssignments.Size(m)
}
func (m *AllTableAssignments) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTableAssignments.DiscardUnknown(m)
}

var xxx_messageInfo_AllTableAssignments proto.InternalMessageInfo

func (m *AllTableAssignments) GetTableAssignments() []*TableAssignment {
	if m != nil {
		return m.TableAssignments
	}
	return nil
}

type SerializedRyuPacket struct {
	Pkt                  []byte   `protobuf:"bytes,1,opt,name=pkt,proto3" json:"pkt,omitempty"`
	Imsi                 string   `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerializedRyuPacket) Reset()         { *m = SerializedRyuPacket{} }
func (m *SerializedRyuPacket) String() string { return proto.CompactTextString(m) }
func (*SerializedRyuPacket) ProtoMessage()    {}
func (*SerializedRyuPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{12}
}

func (m *SerializedRyuPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedRyuPacket.Unmarshal(m, b)
}
func (m *SerializedRyuPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedRyuPacket.Marshal(b, m, deterministic)
}
func (m *SerializedRyuPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedRyuPacket.Merge(m, src)
}
func (m *SerializedRyuPacket) XXX_Size() int {
	return xxx_messageInfo_SerializedRyuPacket.Size(m)
}
func (m *SerializedRyuPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedRyuPacket.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedRyuPacket proto.InternalMessageInfo

func (m *SerializedRyuPacket) GetPkt() []byte {
	if m != nil {
		return m.Pkt
	}
	return nil
}

func (m *SerializedRyuPacket) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

type PacketDropTableId struct {
	TableId              int32    `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketDropTableId) Reset()         { *m = PacketDropTableId{} }
func (m *PacketDropTableId) String() string { return proto.CompactTextString(m) }
func (*PacketDropTableId) ProtoMessage()    {}
func (*PacketDropTableId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e17e923ef6f5752e, []int{13}
}

func (m *PacketDropTableId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketDropTableId.Unmarshal(m, b)
}
func (m *PacketDropTableId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketDropTableId.Marshal(b, m, deterministic)
}
func (m *PacketDropTableId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketDropTableId.Merge(m, src)
}
func (m *PacketDropTableId) XXX_Size() int {
	return xxx_messageInfo_PacketDropTableId.Size(m)
}
func (m *PacketDropTableId) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketDropTableId.DiscardUnknown(m)
}

var xxx_messageInfo_PacketDropTableId proto.InternalMessageInfo

func (m *PacketDropTableId) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func init() {
	proto.RegisterEnum("magma.lte.SetupFlowsResult_Result", SetupFlowsResult_Result_name, SetupFlowsResult_Result_value)
	proto.RegisterEnum("magma.lte.RuleModResult_Result", RuleModResult_Result_name, RuleModResult_Result_value)
	proto.RegisterType((*SetupFlowsRequest)(nil), "magma.lte.SetupFlowsRequest")
	proto.RegisterType((*SetupFlowsResult)(nil), "magma.lte.SetupFlowsResult")
	proto.RegisterType((*ActivateFlowsRequest)(nil), "magma.lte.ActivateFlowsRequest")
	proto.RegisterType((*DeactivateFlowsRequest)(nil), "magma.lte.DeactivateFlowsRequest")
	proto.RegisterType((*RuleModResult)(nil), "magma.lte.RuleModResult")
	proto.RegisterType((*ActivateFlowsResult)(nil), "magma.lte.ActivateFlowsResult")
	proto.RegisterType((*DeactivateFlowsResult)(nil), "magma.lte.DeactivateFlowsResult")
	proto.RegisterType((*FlowRequest)(nil), "magma.lte.FlowRequest")
	proto.RegisterType((*FlowResponse)(nil), "magma.lte.FlowResponse")
	proto.RegisterType((*UEMacFlowRequest)(nil), "magma.lte.UEMacFlowRequest")
	proto.RegisterType((*TableAssignment)(nil), "magma.lte.TableAssignment")
	proto.RegisterType((*AllTableAssignments)(nil), "magma.lte.AllTableAssignments")
	proto.RegisterType((*SerializedRyuPacket)(nil), "magma.lte.SerializedRyuPacket")
	proto.RegisterType((*PacketDropTableId)(nil), "magma.lte.PacketDropTableId")
}

func init() { proto.RegisterFile("lte/protos/pipelined.proto", fileDescriptor_e17e923ef6f5752e) }

var fileDescriptor_e17e923ef6f5752e = []byte{
	// 945 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xee, 0x24, 0x6d, 0xb2, 0x39, 0x6d, 0xd3, 0xc4, 0xe9, 0x36, 0xe9, 0x2c, 0x0b, 0x61, 0x24,
	0xa4, 0xc2, 0x45, 0x2a, 0x15, 0x89, 0x45, 0xbb, 0x17, 0x68, 0x68, 0xd2, 0x6c, 0x60, 0xcb, 0x46,
	0x4e, 0x83, 0x56, 0x5c, 0x30, 0x72, 0x66, 0x4c, 0xd6, 0xda, 0xf9, 0xc3, 0x76, 0x60, 0xcb, 0x03,
	0xf0, 0x10, 0xbc, 0x02, 0xdc, 0xf0, 0x86, 0x68, 0x3c, 0x4e, 0xea, 0x4c, 0xd3, 0x56, 0xc0, 0xd5,
	0xf8, 0xe7, 0x3b, 0xdf, 0x39, 0x3e, 0xdf, 0x39, 0xf6, 0x80, 0x1d, 0x4a, 0x7a, 0x9a, 0xf2, 0x44,
	0x26, 0xe2, 0x34, 0x65, 0x29, 0x0d, 0x59, 0x4c, 0x83, 0x9e, 0x5a, 0x40, 0xb5, 0x88, 0xcc, 0x23,
	0xd2, 0x0b, 0x25, 0xb5, 0x8f, 0x13, 0xee, 0x7f, 0xc9, 0x97, 0x40, 0x3f, 0x89, 0xa2, 0x24, 0xce,
	0x51, 0xb6, 0xc9, 0x10, 0x51, 0x49, 0x39, 0x8b, 0xe7, 0x9a, 0xc1, 0x3e, 0x36, 0xd9, 0x93, 0x90,
	0xf9, 0xd7, 0xc1, 0x4c, 0x6f, 0x75, 0x8d, 0x2d, 0x41, 0x85, 0x60, 0x49, 0xec, 0x45, 0x24, 0x26,
	0x73, 0xca, 0x35, 0xe2, 0xa9, 0x89, 0x58, 0xcc, 0x84, 0xcf, 0xd9, 0x8c, 0xf2, 0x25, 0x81, 0xf3,
	0x13, 0x34, 0x27, 0x54, 0x2e, 0xd2, 0x8b, 0x30, 0xf9, 0x55, 0x60, 0xfa, 0xf3, 0x82, 0x0a, 0x89,
	0x5e, 0xc0, 0x23, 0x9e, 0x0f, 0x45, 0xc7, 0xea, 0x96, 0x4f, 0x76, 0xcf, 0x3e, 0xea, 0xad, 0x4e,
	0xd1, 0x73, 0x7d, 0xc9, 0x7e, 0x21, 0x92, 0x9a, 0x26, 0x78, 0x65, 0x80, 0x0e, 0x61, 0x87, 0xa6,
	0x89, 0xff, 0xb6, 0x53, 0xea, 0x5a, 0x27, 0xdb, 0x38, 0x9f, 0x38, 0xbf, 0x5b, 0xd0, 0x30, 0x1d,
	0x89, 0x45, 0x28, 0xd1, 0x73, 0xa8, 0x70, 0x35, 0xea, 0x58, 0x5d, 0xeb, 0xa4, 0x7e, 0xe6, 0x18,
	0x5e, 0x8a, 0xe0, 0x5e, 0xfe, 0xc1, 0xda, 0xc2, 0xf9, 0x02, 0x2a, 0x9a, 0x65, 0x17, 0xaa, 0x93,
	0xe9, 0xf9, 0xf9, 0x60, 0x32, 0x69, 0x6c, 0x65, 0x93, 0x0b, 0x77, 0xf4, 0x6a, 0x8a, 0x07, 0x0d,
	0x0b, 0x21, 0xa8, 0xbf, 0x9e, 0x5e, 0xf5, 0xdd, 0xab, 0x41, 0xdf, 0x1b, 0x8c, 0x5f, 0x9f, 0xbf,
	0x6c, 0x94, 0x9c, 0xbf, 0x2d, 0x38, 0xdc, 0x74, 0x02, 0xf4, 0x29, 0x94, 0x05, 0x0b, 0x54, 0x24,
	0xbb, 0x67, 0x6d, 0x33, 0x92, 0x55, 0xd6, 0x46, 0x7d, 0x9c, 0x61, 0x50, 0x1b, 0xaa, 0x2c, 0xf5,
	0x48, 0x10, 0x70, 0x75, 0xc8, 0x1a, 0xae, 0xb0, 0xd4, 0x0d, 0x02, 0x8e, 0x8e, 0xe1, 0x11, 0x5f,
	0x84, 0xd4, 0x63, 0x81, 0xe8, 0x94, 0xbb, 0xe5, 0x93, 0x1a, 0xae, 0x66, 0xf3, 0x51, 0x20, 0xd0,
	0x73, 0xd8, 0x0f, 0xae, 0x63, 0x12, 0x31, 0xdf, 0xcb, 0x96, 0x44, 0x67, 0x5b, 0x25, 0xf6, 0xb1,
	0xe1, 0x68, 0xac, 0xb4, 0xc5, 0x8b, 0x90, 0xe2, 0x3d, 0x8d, 0xcd, 0x26, 0xc2, 0xf9, 0x11, 0x8e,
	0xfa, 0x94, 0xfc, 0xcf, 0xa0, 0xcd, 0xd8, 0x4a, 0x6b, 0xb1, 0x39, 0x7f, 0x58, 0xb0, 0x9f, 0x79,
	0xba, 0x4c, 0x02, 0x9d, 0xd3, 0x36, 0x54, 0x35, 0x58, 0x71, 0xd7, 0x70, 0x25, 0xc7, 0xa2, 0x67,
	0x2b, 0xc9, 0x4a, 0x4a, 0x32, 0xb3, 0x30, 0xd6, 0x28, 0x8a, 0x7a, 0x3d, 0xdb, 0xac, 0x57, 0x0b,
	0x0e, 0xc6, 0x2e, 0xbe, 0x1a, 0xb9, 0xaf, 0xbc, 0xe5, 0xa2, 0x65, 0x8a, 0x58, 0x72, 0xfe, 0xb4,
	0xa0, 0x55, 0x10, 0x4c, 0xd1, 0xbc, 0x84, 0x96, 0x90, 0x44, 0xea, 0x7c, 0x7a, 0xb9, 0x9b, 0x65,
	0xbd, 0x76, 0xee, 0x0a, 0x0b, 0x37, 0x73, 0x23, 0x95, 0xe5, 0xdc, 0x04, 0x7d, 0x03, 0x87, 0xa6,
	0x34, 0x2b, 0xaa, 0xd2, 0x03, 0x54, 0xc8, 0x10, 0x49, 0x73, 0x39, 0x6d, 0x78, 0x7c, 0x4b, 0x2a,
	0x75, 0xfe, 0x04, 0x76, 0xb3, 0xe9, 0x52, 0xb8, 0xcf, 0x60, 0x27, 0x22, 0xd2, 0x7f, 0xab, 0xa5,
	0x3b, 0x34, 0x9c, 0x64, 0xb0, 0xcb, 0x6c, 0x0f, 0xe7, 0x90, 0x4c, 0x39, 0x92, 0xa6, 0x5e, 0x4c,
	0x22, 0xaa, 0xeb, 0xad, 0x4a, 0xd2, 0xf4, 0x3b, 0x12, 0xd1, 0x6c, 0x6b, 0x76, 0x2d, 0xa9, 0xf0,
	0xf8, 0xfb, 0x4e, 0x59, 0xf5, 0x5b, 0x55, 0xcd, 0xf1, 0x7b, 0xa7, 0x0e, 0x7b, 0xb9, 0x43, 0x91,
	0x26, 0xb1, 0xa0, 0xce, 0x1b, 0x68, 0x4c, 0x07, 0x97, 0xc4, 0x37, 0xa3, 0xf8, 0x77, 0xe5, 0x13,
	0x11, 0xdf, 0x2c, 0xfa, 0x6a, 0x44, 0xfc, 0xac, 0xea, 0x1d, 0x0e, 0x07, 0x57, 0x64, 0x16, 0x52,
	0x57, 0x08, 0x36, 0x8f, 0x23, 0x1a, 0xcb, 0xb5, 0x90, 0xad, 0xf5, 0x90, 0x9f, 0x02, 0x44, 0x84,
	0xc5, 0x9e, 0xcc, 0x4c, 0xf4, 0x25, 0x51, 0xcb, 0x56, 0x14, 0x07, 0xfa, 0x04, 0xea, 0xc2, 0xe7,
	0xd9, 0xb9, 0x73, 0x44, 0xde, 0x48, 0xdb, 0x78, 0x5f, 0xaf, 0x2a, 0x54, 0xd6, 0x12, 0x2d, 0x37,
	0x0c, 0x0b, 0x6e, 0x05, 0x1a, 0x42, 0x53, 0x59, 0x79, 0xe4, 0x66, 0x51, 0x97, 0x84, 0x6d, 0x1c,
	0xaf, 0x60, 0x87, 0x1b, 0xb2, 0x40, 0xe4, 0xbc, 0x80, 0xd6, 0x84, 0x72, 0x46, 0x42, 0xf6, 0x1b,
	0x0d, 0xf0, 0xf5, 0x62, 0x4c, 0xfc, 0x77, 0x54, 0xa2, 0x06, 0x94, 0xd3, 0x77, 0xf9, 0x75, 0xb5,
	0x87, 0xb3, 0x21, 0x42, 0xb0, 0xcd, 0x22, 0xc1, 0x74, 0x4e, 0xd4, 0xd8, 0xe9, 0x41, 0x33, 0xc7,
	0xf7, 0x79, 0x92, 0x2a, 0x5f, 0x23, 0x95, 0xc0, 0x3c, 0x34, 0x9d, 0xf0, 0x1d, 0x5c, 0x95, 0xf9,
	0xd6, 0xd9, 0x5f, 0x3b, 0x50, 0x1b, 0x2f, 0x9f, 0x0d, 0x34, 0x04, 0x7b, 0x48, 0xe5, 0x8d, 0x02,
	0x97, 0xfa, 0x39, 0x50, 0xd5, 0x84, 0x9a, 0xfa, 0x18, 0xea, 0x29, 0xe9, 0x7d, 0x9f, 0xb0, 0xc0,
	0x2e, 0x16, 0x8f, 0xf2, 0xe8, 0x6c, 0xa1, 0x11, 0xc0, 0xcd, 0x2d, 0x8a, 0x3e, 0xb8, 0xe3, 0x72,
	0x55, 0x95, 0x60, 0x3f, 0xb9, 0xe7, 0xea, 0x75, 0xb6, 0x10, 0x86, 0xfd, 0xb5, 0x1e, 0x44, 0x0f,
	0x3d, 0x08, 0xf6, 0x87, 0x77, 0x03, 0x34, 0xe7, 0x1b, 0x38, 0x28, 0xb4, 0x0a, 0xfa, 0xd8, 0x30,
	0xda, 0x7c, 0xe3, 0xd9, 0xdd, 0xfb, 0x20, 0x9a, 0xd9, 0x85, 0xfa, 0x90, 0xca, 0xfc, 0x3a, 0x9d,
	0x0a, 0x32, 0xa7, 0x9b, 0xb2, 0x66, 0x17, 0xfa, 0x1a, 0x53, 0x3f, 0xe1, 0xc1, 0x32, 0x77, 0x5f,
	0x01, 0x9c, 0x73, 0xaa, 0x99, 0xd1, 0x51, 0x21, 0xc3, 0xcb, 0x60, 0xda, 0xb7, 0xd6, 0x75, 0xb3,
	0x6d, 0xa1, 0x3e, 0x1c, 0x4c, 0xd3, 0x40, 0x13, 0x4c, 0x24, 0x91, 0xe2, 0xbf, 0xb0, 0x5c, 0xc0,
	0x9e, 0x1b, 0x04, 0xab, 0xbe, 0x45, 0xa6, 0x4c, 0xc5, 0x6e, 0xbe, 0x8f, 0xe7, 0x5b, 0x38, 0x1a,
	0x52, 0xb9, 0xa9, 0x63, 0x36, 0x64, 0x66, 0x4d, 0xba, 0xdb, 0x26, 0x5f, 0x3f, 0xf9, 0xe1, 0x58,
	0x01, 0x4e, 0xb3, 0x5f, 0x0b, 0x3f, 0x4c, 0x16, 0xc1, 0xe9, 0x3c, 0xd1, 0xff, 0x18, 0xb3, 0x8a,
	0xfa, 0x7e, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0xa5, 0xa9, 0x67, 0x13, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelinedClient is the client API for Pipelined service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelinedClient interface {
	// Get subscriber metering flows
	GetSubscriberMeteringFlows(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*FlowTable, error)
	// Setup flows for subscribers (used on restarts)
	SetupFlows(ctx context.Context, in *SetupFlowsRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error)
	// Activate flows for a subscriber based on predefined flow templates
	ActivateFlows(ctx context.Context, in *ActivateFlowsRequest, opts ...grpc.CallOption) (*ActivateFlowsResult, error)
	// Deactivate flows for a subscriber
	DeactivateFlows(ctx context.Context, in *DeactivateFlowsRequest, opts ...grpc.CallOption) (*DeactivateFlowsResult, error)
	// Get policy usage stats
	GetPolicyUsage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*RuleRecordTable, error)
	// Add new dpi flow
	CreateFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Update flow stats
	UpdateFlowStats(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Add a flow for a subscriber by matching the provided UE MAC address
	AddUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Get the flow table assignment for all apps ordered by main table number
	// and name
	GetAllTableAssignments(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllTableAssignments, error)
}

type pipelinedClient struct {
	cc *grpc.ClientConn
}

func NewPipelinedClient(cc *grpc.ClientConn) PipelinedClient {
	return &pipelinedClient{cc}
}

func (c *pipelinedClient) GetSubscriberMeteringFlows(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*FlowTable, error) {
	out := new(FlowTable)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetSubscriberMeteringFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) SetupFlows(ctx context.Context, in *SetupFlowsRequest, opts ...grpc.CallOption) (*SetupFlowsResult, error) {
	out := new(SetupFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/SetupFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) ActivateFlows(ctx context.Context, in *ActivateFlowsRequest, opts ...grpc.CallOption) (*ActivateFlowsResult, error) {
	out := new(ActivateFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/ActivateFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) DeactivateFlows(ctx context.Context, in *DeactivateFlowsRequest, opts ...grpc.CallOption) (*DeactivateFlowsResult, error) {
	out := new(DeactivateFlowsResult)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/DeactivateFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) GetPolicyUsage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*RuleRecordTable, error) {
	out := new(RuleRecordTable)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetPolicyUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) CreateFlow(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) UpdateFlowStats(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/UpdateFlowStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) AddUEMacFlow(ctx context.Context, in *UEMacFlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/AddUEMacFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinedClient) GetAllTableAssignments(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*AllTableAssignments, error) {
	out := new(AllTableAssignments)
	err := c.cc.Invoke(ctx, "/magma.lte.Pipelined/GetAllTableAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinedServer is the server API for Pipelined service.
type PipelinedServer interface {
	// Get subscriber metering flows
	GetSubscriberMeteringFlows(context.Context, *protos.Void) (*FlowTable, error)
	// Setup flows for subscribers (used on restarts)
	SetupFlows(context.Context, *SetupFlowsRequest) (*SetupFlowsResult, error)
	// Activate flows for a subscriber based on predefined flow templates
	ActivateFlows(context.Context, *ActivateFlowsRequest) (*ActivateFlowsResult, error)
	// Deactivate flows for a subscriber
	DeactivateFlows(context.Context, *DeactivateFlowsRequest) (*DeactivateFlowsResult, error)
	// Get policy usage stats
	GetPolicyUsage(context.Context, *protos.Void) (*RuleRecordTable, error)
	// Add new dpi flow
	CreateFlow(context.Context, *FlowRequest) (*FlowResponse, error)
	// Update flow stats
	UpdateFlowStats(context.Context, *FlowRequest) (*FlowResponse, error)
	// Add a flow for a subscriber by matching the provided UE MAC address
	AddUEMacFlow(context.Context, *UEMacFlowRequest) (*FlowResponse, error)
	// Get the flow table assignment for all apps ordered by main table number
	// and name
	GetAllTableAssignments(context.Context, *protos.Void) (*AllTableAssignments, error)
}

// UnimplementedPipelinedServer can be embedded to have forward compatible implementations.
type UnimplementedPipelinedServer struct {
}

func (*UnimplementedPipelinedServer) GetSubscriberMeteringFlows(ctx context.Context, req *protos.Void) (*FlowTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriberMeteringFlows not implemented")
}
func (*UnimplementedPipelinedServer) SetupFlows(ctx context.Context, req *SetupFlowsRequest) (*SetupFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupFlows not implemented")
}
func (*UnimplementedPipelinedServer) ActivateFlows(ctx context.Context, req *ActivateFlowsRequest) (*ActivateFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFlows not implemented")
}
func (*UnimplementedPipelinedServer) DeactivateFlows(ctx context.Context, req *DeactivateFlowsRequest) (*DeactivateFlowsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateFlows not implemented")
}
func (*UnimplementedPipelinedServer) GetPolicyUsage(ctx context.Context, req *protos.Void) (*RuleRecordTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyUsage not implemented")
}
func (*UnimplementedPipelinedServer) CreateFlow(ctx context.Context, req *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (*UnimplementedPipelinedServer) UpdateFlowStats(ctx context.Context, req *FlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowStats not implemented")
}
func (*UnimplementedPipelinedServer) AddUEMacFlow(ctx context.Context, req *UEMacFlowRequest) (*FlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUEMacFlow not implemented")
}
func (*UnimplementedPipelinedServer) GetAllTableAssignments(ctx context.Context, req *protos.Void) (*AllTableAssignments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTableAssignments not implemented")
}

func RegisterPipelinedServer(s *grpc.Server, srv PipelinedServer) {
	s.RegisterService(&_Pipelined_serviceDesc, srv)
}

func _Pipelined_GetSubscriberMeteringFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetSubscriberMeteringFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetSubscriberMeteringFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetSubscriberMeteringFlows(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_SetupFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).SetupFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/SetupFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).SetupFlows(ctx, req.(*SetupFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_ActivateFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).ActivateFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/ActivateFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).ActivateFlows(ctx, req.(*ActivateFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_DeactivateFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).DeactivateFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/DeactivateFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).DeactivateFlows(ctx, req.(*DeactivateFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_GetPolicyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetPolicyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetPolicyUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetPolicyUsage(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).CreateFlow(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_UpdateFlowStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).UpdateFlowStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/UpdateFlowStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).UpdateFlowStats(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_AddUEMacFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UEMacFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).AddUEMacFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/AddUEMacFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).AddUEMacFlow(ctx, req.(*UEMacFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pipelined_GetAllTableAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinedServer).GetAllTableAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.Pipelined/GetAllTableAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinedServer).GetAllTableAssignments(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pipelined_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.Pipelined",
	HandlerType: (*PipelinedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriberMeteringFlows",
			Handler:    _Pipelined_GetSubscriberMeteringFlows_Handler,
		},
		{
			MethodName: "SetupFlows",
			Handler:    _Pipelined_SetupFlows_Handler,
		},
		{
			MethodName: "ActivateFlows",
			Handler:    _Pipelined_ActivateFlows_Handler,
		},
		{
			MethodName: "DeactivateFlows",
			Handler:    _Pipelined_DeactivateFlows_Handler,
		},
		{
			MethodName: "GetPolicyUsage",
			Handler:    _Pipelined_GetPolicyUsage_Handler,
		},
		{
			MethodName: "CreateFlow",
			Handler:    _Pipelined_CreateFlow_Handler,
		},
		{
			MethodName: "UpdateFlowStats",
			Handler:    _Pipelined_UpdateFlowStats_Handler,
		},
		{
			MethodName: "AddUEMacFlow",
			Handler:    _Pipelined_AddUEMacFlow_Handler,
		},
		{
			MethodName: "GetAllTableAssignments",
			Handler:    _Pipelined_GetAllTableAssignments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/pipelined.proto",
}
